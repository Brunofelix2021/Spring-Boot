package br.org.com.generation.blogpessoal.controller;


import java.util.List;

import javax.validation.Valid;

// CAMADA CONTROLE RESPONSAVEL PELA COMUNICAÇÃO COM O CLIENTE, (POSTIMAN, REACT ETC)

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.org.com.generation.blogpessoal.model.Postagem;
import br.org.com.generation.blogpessoal.repository.PostagemRepository;

@RestController // informar para o spring que essa classe trata-se de um controller
@RequestMapping ("/postagens") // passamos a URI para quando for vir alguma requisisão nopostagem sera consumida essa classe
@CrossOrigin(origins = "*", allowedHeaders ="*") // receber do front-end seria o endeço do front
public class PostagemController {
	
	//injeção de dependencia
	
	@Autowired  // deixando toda responsabilidade de instanciação para o spring, garantido todos os serviços seja acessado a partit do controller
	private PostagemRepository postagemRepository;   //chamando a interface e dando um nome para ela
		//através da interface vc transfere a responsabilidade para o spring e trabalha com os métodos
	
	@GetMapping // sempre que vir uma requisição externa de alguém que consuma a API se método for do tipo GET ele vai disparar esse método
	public ResponseEntity <List<Postagem>> getAll(){  //criando metodo  ResponseEntity representar a resposta HTTP inteira
		
		return ResponseEntity.ok(postagemRepository.findAll());  // .ok séria a responsta HTTP, após isso é feito um select * from tb_postagem mesma coisa
		
	}
	// expressão lambida
		@GetMapping("/{id}") // variavel de caminho, indica de queremos uma consulyta por id na pagina de
								// postagens
		public ResponseEntity<Postagem> getById(@PathVariable Long id) {
			return postagemRepository.findById(id).map(response -> ResponseEntity.ok(response)) // para encontrar
					.orElse(ResponseEntity.notFound().build()); // caso não encontre
		}

		@GetMapping("/titulo{titulo}")
		public ResponseEntity<List<Postagem>> getByTitle(@PathVariable String title) {
			return ResponseEntity.ok(postagemRepository.findAllByTituloContainingignoreCase(title));
		}
		
		@PostMapping  // metodo de gravação
		public ResponseEntity <Postagem> postPostagem (@Valid @RequestBody Postagem postagem){
			
			return ResponseEntity.status(HttpStatus.CREATED).body(postagemRepository.save(postagem));
			
			
		}
		
				
	
}
